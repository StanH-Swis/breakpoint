@use 'variables';
@use '../../stylesheets/breakpoint/parsers';

@mixin breakpoint-test-query($mq) {
  $bkpt: parsers.breakpoint($mq);
  _query: inspect(map-get($bkpt, 'query'));
  _fallback: inspect(map-get($bkpt, 'fallback'));
  _context-holder: inspect(map-get($bkpt, 'context holder'));
  _query-count: inspect(map-get($bkpt, 'query count'));
}

@mixin breakpoint-test-context($mq, $contexts) {
  $bkpt: parsers.breakpoint($mq, $contexts);
  @each $k, $v in $bkpt {
    _#{$k}: inspect($v);
  }
}

/**
  * Breakpoint Function
  * - Returns either a map of the query, fallback, context, and query count or a map of context values
**/
.query {
  /* Single Pixel Value */
  _test: "breakpoint(#{variables.$single-pixel-value})";
  @include breakpoint-test-query(variables.$single-pixel-value);
  /* Fenced with Media */
  _test: "breakpoint(#{variables.$media-not-plus-fenced})";
  @include breakpoint-test-query(variables.$media-not-plus-fenced);
  /* Or Query */
  _test: "breakpoint(#{variables.$dynamic-context})";
  @include breakpoint-test-query(variables.$dynamic-context);
  /* No Query */
  _test: "breakpoint(#{variables.$no-query})";
  @include breakpoint-test-query(variables.$no-query);
  /* No Query, Or */
  _test: "breakpoint(#{variables.$legacy})";
  @include breakpoint-test-query(variables.$legacy);
}

.context {
  /* Single Pixel Value */
  _test: "breakpoint(#{variables.$single-pixel-value}, 'min-width')";
  $bkpt: parsers.breakpoint(variables.$single-pixel-value, 'min-width', 'height', 'no-query');
  $contexts: map-get($bkpt, 'context');
  @each $k, $v in $contexts {
    _#{$k}: inspect($v);
  }
  /* Fenced with Media */
  _test: "breakpoint(#{variables.$media-not-plus-fenced}, 'min-width', 'max-width', 'media')";
  $bkpt: parsers.breakpoint(variables.$media-not-plus-fenced, 'min-width', 'max-width', 'media');
  $contexts: map-get($bkpt, 'context');
  @each $k, $v in $contexts {
    _#{$k}: inspect($v);
  }
  /* Or Query */
  _test: "breakpoint(#{variables.$dynamic-context})";
  $bkpt: parsers.breakpoint(variables.$dynamic-context, 'min-width', 'min-height', 'orientation', 'no-query');
  $contexts: map-get($bkpt, 'context');
  @each $k, $v in $contexts {
    _#{$k}: inspect($v);
  }
  /* No Query */
  _test: "breakpoint(#{variables.$no-query})";
  $bkpt: parsers.breakpoint(variables.$no-query, 'min-width', 'media', 'no-query');
  $contexts: map-get($bkpt, 'context');
  @each $k, $v in $contexts {
    _#{$k}: inspect($v);
  }
  /* No Query, Or */
  _test: "breakpoint(#{variables.$legacy})";
  $bkpt: parsers.breakpoint(variables.$legacy, 'min-width', 'media', 'no-query');
  $contexts: map-get($bkpt, 'context');
  @each $k, $v in $contexts {
    _#{$k}: inspect($v);
  }
}